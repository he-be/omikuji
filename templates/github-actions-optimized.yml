# AI駆動開発最適化 GitHub Actions CI/CD テンプレート
# AUTOMATION_GUIDELINE.md + LESSONS_LEARNED.md の知見を反映
# 4層検証システム + Cloudflare Workers統一アーキテクチャ

name: AI-Driven CI/CD Pipeline - Cloudflare Workers

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# 同時実行制御（パフォーマンス最適化）
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  CI: true

jobs:
  # 第1層: 静的解析（TypeScript + ESLint + Prettier）
  static-analysis:
    name: "Layer 1: Static Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: TypeScript Type Check
        run: npm run typecheck
      
      - name: ESLint Code Quality
        run: npm run lint
      
      - name: Prettier Format Check
        run: npm run format:check

  # 第2層: 単体テスト（Vitest）
  unit-tests:
    name: "Layer 2: Unit Tests"
    runs-on: ubuntu-latest
    needs: static-analysis
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Vitest Unit Tests
        run: npm run test:unit
      
      - name: Generate Coverage Report
        run: npm run test:coverage
      
      # PRへのカバレッジレポート
      - name: Coverage Report
        if: github.event_name == 'pull_request'
        uses: davelosert/vitest-coverage-report-action@v2
      
      # カバレッジレポートのアップロード
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # 第3層: E2Eテスト（Playwright）
  e2e-tests:
    name: "Layer 3: E2E Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install chromium
      
      - name: Run Playwright E2E Tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Cloudflare Workers ビルド検証
  build:
    name: "Build Verification"
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Cloudflare Workers
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # セキュリティスキャン（並列実行）
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: static-analysis
    timeout-minutes: 5
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Cloudflare Workers デプロイ（mainブランチのみ）
  deploy:
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for Cloudflare Workers
        run: npm run build
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        run: |
          npm run deploy
          echo "url=https://your-worker.your-subdomain.workers.dev" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Verify deployment
        run: |
          sleep 10
          curl -f ${{ steps.deploy.outputs.url }} || exit 1

  # 成功通知
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, build]
    if: success()
    
    steps:
      - name: Send success notification
        run: |
          echo "🤖 AI-Driven CI/CD Pipeline completed successfully!"
          echo "✅ 4-Layer Verification System passed:"
          echo "   Layer 1: Static Analysis (TypeScript + ESLint + Prettier)"
          echo "   Layer 2: Unit Tests (Vitest)"
          echo "   Layer 3: E2E Tests (Playwright)"
          echo "   Layer 4: Quality Gates (Pre-commit hooks)"
          echo "🚀 Ready for Cloudflare Workers deployment!"

# AI駆動開発 4層検証システム:
# static-analysis (Layer 1)
#   ├── unit-tests (Layer 2) → e2e-tests (Layer 3) → deploy (main only)
#   ├── build (parallel)
#   └── security (parallel)
#
# 特徴:
# - AUTOMATION_GUIDELINE.md の4層検証システム実装
# - LESSONS_LEARNED.md の知見を反映  
# - Cloudflare Workers 統一アーキテクチャ
# - CI環境最適化（ubuntu-latest + chromiumのみ）
# - 段階的品質保証とエラーの早期発見
# - 自動カバレッジレポート
# - 本番デプロイ自動化