# 再利用可能な CI/CD ワークフローテンプレート
# このファイルをプロジェクトに合わせてカスタマイズしてください

name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:  # 手動実行を許可

# 同時実行の制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # コード品質チェック
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
        continue-on-error: false
      
      - name: Type check
        run: npm run typecheck

  # テストとカバレッジ
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      # PR へのカバレッジレポート
      - name: Coverage Report Comment
        if: github.event_name == 'pull_request'
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          working-directory: ./
          # カスタムしきい値の設定（オプション）
          # vite-config-path: ./vitest.config.ts
          # github-token: ${{ secrets.GITHUB_TOKEN }}
      
      # カバレッジレポートのアップロード
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # マルチプラットフォームビルド
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # 複数の Node バージョンでテストする場合
        # node-version: [18.x, 20.x, 21.x]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: dist/
          retention-days: 7

  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # デプロイメント（main ブランチのみ）
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ubuntu-latest
          path: dist/
      
      - name: Deploy to server
        id: deploy
        run: |
          echo "Deploying to production..."
          # ここにデプロイスクリプトを追加
          # 例: 
          # - Vercel: vercel --prod
          # - AWS: aws s3 sync dist/ s3://bucket-name
          # - Docker: docker build & push
          echo "url=https://example.com" >> $GITHUB_OUTPUT

  # 成功通知
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, build]
    if: success()
    
    steps:
      - name: Send success notification
        run: |
          echo "CI/CD Pipeline completed successfully!"
          # Slack, Discord, Email などへの通知を追加

# ジョブの依存関係図:
# quality-check
#   ├── test → deploy (main branch only)
#   ├── build
#   └── security